<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 开启注解扫描器 -->
    <context:component-scan base-package="com.project.spring.mvc"></context:component-scan>


    <!-- 文件上传 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置文件上传的最大尺寸 -->
        <property name="maxUploadSize">
            <value>524288000</value>
        </property>
    </bean>

    <!-- 校验错误信息配置文件 -->
    <!--    <bean id="messageSource"
            class="org.springframework.context.support.ResourceBundleMessageSource">
            <property name="basenames">
                <list>
                    <value>ValidationMessages</value>
                </list>
            </property>
            <property name="defaultEncoding" value="utf-8"></property>
            <property name="cacheSeconds" value="120"></property>
        </bean>-->

    <!-- 定义统一异常处理器 -->
    <bean class="com.project.spring.mvc.exception.CustomExceptionResolver"></bean>

    <!-- 校验器 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!-- 校验器 -->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
        <!--
                <property name="validationMessageSource" ref="messageSource"></property>
        -->
    </bean>


    <!-- 自定义webBinder -->
    <bean id="customBinder" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
        <!-- 使用converter进行参数转换 -->
        <property name="validator" ref="validator"></property>
    </bean>

    <!-- 注解适配器 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <!-- 在webBindingInitializer中注入自定义编辑器、自定义转换器 -->
        <property name="webBindingInitializer" ref="customBinder"></property>
    </bean>


    <!-- 当配置了mvc:annotation-driven/后，Spring就知道了我们启用注解驱动。
    然后Spring通过context:component-scan/标签的配置，
    会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求。-->
    <mvc:annotation-driven/>
    <!-- 静态资源解析 -->
    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/img" mapping="/img/**"/>

    <!-- 拦截器 -->
    <mvc:interceptors>
        <!-- 可以配置多个拦截器，顺序执行 -->
        <!--
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class=""></bean>
        </mvc:interceptor>
        -->
        <mvc:interceptor>
            <!-- 可以拦截路径 不管多少层 -->
            <mvc:mapping path="/**"/>
            <bean class="com.project.spring.mvc.interceptor.MyHandlerInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>
